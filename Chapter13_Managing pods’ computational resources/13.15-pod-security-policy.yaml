# An example PodSecurityPolicy

# The following PodSecurityPolicy sample prevents pods from
# using the host’s IPC, PID, and Network namespaces, and prevents running privileged
# containers and the use of most host ports (except ports from 10000-11000 and 13000-
# 14000). The policy doesn’t set any constraints on what users, groups, or SELinux
# groups the container can run as.


apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  name: default
spec:
  # Containers aren’t allowed to use the host’s IPC, PID, or network namespace.
  hostIPC: false
  hostPID: false
  hostNetwork: false
  hostPorts:
  # They can only bind to host ports 10000 to 11000 (inclusive) or host ports 13000 to 14000.
  - min: 10000
    max: 11000
  - min: 13000
    max: 14000
  # Containers cannot run in privileged mode.
  privileged: false
  # Containers are forced to run with a read-only root filesystem.
  readOnlyRootFilesystem: true
  # Containers can run as any user and any group.
  runAsUser:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  # They can also use any SELinux groups they want.
  seLinux:
    rule: RunAsAny
  # All volume types can be used in pods.
  volumes:
  - '*'

# After this PodSecurityPolicy resource is posted to the cluster, the API server 
# will no longer allow you to deploy the privileged pod used earlier. For example
# $ kubectl create -f pod-privileged.yaml

# Likewise, you can no longer deploy pods that want to use the host’s PID, IPC, or Network
# namespace. Also, because you set readOnlyRootFilesystem to true in the policy,
# the container filesystems in all pods will be read-only (containers can only write
# to volumes).
