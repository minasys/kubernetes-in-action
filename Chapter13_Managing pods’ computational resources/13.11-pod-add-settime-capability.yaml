# Adding the CAP_SYS_TIME capability

# Instead of making a container privileged and giving it unlimited permissions, a
# much safer method (from a security perspective) is to give it access only to the kernel
# features it really requires. Kubernetes allows you to add capabilities to each container
# or drop part of them, which allows you to fine-tune the container’s permissions and
# limit the impact of a potential intrusion by an attacker.
# For example, a container usually isn’t allowed to change the system time (the hardware
# clock’s time). You can confirm this by trying to set the time in your pod-withdefaults
# pod:
# $ kubectl exec -it pod-with-defaults -- date +%T -s "12:00:00"


# If you want to allow the container to change the system time, you can add a capability
# called CAP_SYS_TIME to the container’s capabilities list, as shown in the following
# listing.

apiVersion: v1
kind: Pod
metadata:
  name: pod-add-settime-capability
spec:
  containers:
  - name: main
    image: alpine
    command: ["/bin/sleep", "999999"]
    # Capabilities are added or dropped under the securityContext property.
    securityContext:
      capabilities:
        # You’re adding the SYS_TIME capability.
        # Linux kernel capabilities are usually prefixed with CAP_. But when
        # specifying them in a pod spec, you must leave out the prefix.
        add:
        - SYS_TIME


# If you run the same command in this new pod’s container, the system time is changed
# successfully:
# $ kubectl exec -it pod-add-settime-capability -- date +%T -s "12:00:00"

# WARNING:
#=========
# If you try this yourself, be aware that it may cause your worker
# node to become unusable. In Minikube, although the system time was automatically
# reset back by the Network Time Protocol (NTP) daemon, I had to
# reboot the VM to schedule new pods.

# Adding capabilities like this is a much better way than giving a container full privileges
# with privileged: true. Admittedly, it does require you to know and understand what
# each capability does.
# TIP:
#=====
# You’ll find the list of Linux kernel capabilities in the Linux man pages.
