# A pod with a privileged container

# Sometimes pods need to do everything that the node they’re running on can do, such
# as use protected system devices or other kernel features, which aren’t accessible to
# regular containers.

# An example of such a pod is the kube-proxy pod, which needs to modify the node’s
# iptables rules to make services work

# To get full access to the node’s kernel, the pod’s container runs in privileged
# mode. This is achieved by setting the privileged property in the container’s security-
# Context property to true.

apiVersion: v1
kind: Pod
metadata:
  name: pod-privileged
spec:
  containers:
  - name: main
    image: alpine
    command: ["/bin/sleep", "999999"]
    securityContext:
      # This container will run in privileged mode
      privileged: true


# Go ahead and deploy this pod, so you can compare it with the non-privileged pod you
# ran earlier.
# If you’re familiar with Linux, you may know it has a special file directory called /dev,
# which contains device files for all the devices on the system.

# Let’s see what devices are
# visible in the non-privileged container you deployed earlier (the pod-with-defaults
# pod), by listing files in its /dev directory,
# $ kubectl exec -it pod-with-defaults ls /dev

# Now, compare this with the following
# listing, which shows the device files your privileged pod can see.
# $ kubectl exec -it pod-privileged ls /dev

